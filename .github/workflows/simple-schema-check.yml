name: Simple Schema Check

on:
  workflow_dispatch:
    inputs:
      create_issue:
        description: 'Create GitHub issue if changes found'
        required: false
        default: 'true'
        type: boolean

env:
  PYTHON_VERSION: '3.11'

jobs:
  schema-check:
    runs-on: ubuntu-latest
    name: Check Schema Changes

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .

      - name: Create schema cache directory
        run: |
          mkdir -p ~/.monarchmoney/schema_cache/history
          echo "Schema cache directory created"

      - name: Cache schema history
        uses: actions/cache@v4
        with:
          path: ~/.monarchmoney/schema_cache
          key: schema-cache-${{ github.ref }}-${{ github.run_number }}
          restore-keys: |
            schema-cache-${{ github.ref }}-
            schema-cache-main-

      - name: Run schema monitoring
        env:
          MM_TEST_EMAIL: ${{ secrets.MM_TEST_EMAIL }}
          MM_TEST_PASSWORD: ${{ secrets.MM_TEST_PASSWORD }}
          MM_TEST_MFA_SECRET: ${{ secrets.MM_TEST_MFA_SECRET }}
        run: |
          echo "Running schema monitoring..."
          python -c "
          import asyncio
          import json
          import os
          from pathlib import Path
          from monarchmoney import MonarchMoney
          from monarchmoney.schema_monitor import SchemaMonitor

          async def check_schema():
              print('🔐 Authenticating with MonarchMoney...')
              mm = MonarchMoney(debug=False)

              # Authenticate with MFA secret
              mfa_secret = os.getenv('MM_TEST_MFA_SECRET')
              await mm.login(
                  email=os.getenv('MM_TEST_EMAIL'),
                  password=os.getenv('MM_TEST_PASSWORD'),
                  mfa_secret_key=mfa_secret,
                  use_saved_session=False,
                  save_session=False
              )
              print('✅ Authentication successful')

              print('📊 Creating schema monitor...')
              monitor = SchemaMonitor(mm)

              print('🔍 Introspecting current schema...')
              current_schema = await monitor.introspect_schema()
              print(f'✅ Schema introspected: {len(current_schema[\"__schema\"][\"types\"])} types found')

              # Check for previous schema
              cache_dir = Path.home() / '.monarchmoney' / 'schema_cache'
              history_dir = cache_dir / 'history'

              has_changes = False
              changes_summary = {}

              if history_dir.exists():
                  history_files = list(history_dir.glob('schema_*.json'))
                  if history_files:
                      # Load most recent schema
                      latest_file = max(history_files, key=lambda p: p.stat().st_mtime)
                      print(f'📚 Loading previous schema from {latest_file}')

                      with open(latest_file) as f:
                          history_data = json.load(f)
                          previous_schema = history_data['schema']

                      # Generate diff
                      print('🔄 Generating schema diff...')
                      diff = await monitor.diff_schemas(previous_schema, current_schema)

                      # Save diff report
                      diff_file = cache_dir / 'latest_diff.json'
                      with open(diff_file, 'w') as f:
                          json.dump(diff, f, indent=2)

                      print(f'💾 Diff report saved to {diff_file}')

                      changes_summary = diff['summary']
                      has_changes = any(changes_summary[key] > 0 for key in changes_summary if key != 'timestamp')

                      if has_changes:
                          print('🔔 Schema changes detected!')
                          print(f'   Types added: {changes_summary[\"types_added\"]}')
                          print(f'   Types removed: {changes_summary[\"types_removed\"]}')
                          print(f'   Types modified: {changes_summary[\"types_modified\"]}')
                          print(f'   Fields added: {changes_summary[\"fields_added\"]}')
                          print(f'   Fields removed: {changes_summary[\"fields_removed\"]}')
                          print(f'   Fields deprecated: {changes_summary[\"fields_deprecated\"]}')
                      else:
                          print('✅ No schema changes detected')
                  else:
                      print('📝 No previous schema found - this is the first run')

              # Save current schema to history
              print('💾 Saving current schema to history...')
              await monitor.save_schema_history(current_schema)

              # Set GitHub output for workflow
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write(f'has_schema_changes={str(has_changes).lower()}\\n')
                  if has_changes:
                      for key, value in changes_summary.items():
                          f.write(f'{key}={value}\\n')

              print('🎉 Schema monitoring completed successfully!')

          asyncio.run(check_schema())
          "

      - name: Upload schema artifacts
        uses: actions/upload-artifact@v4
        with:
          name: schema-check-results
          path: |
            ~/.monarchmoney/schema_cache/latest_diff.json
            ~/.monarchmoney/schema_cache/latest_schema.json
          retention-days: 30

      - name: Create issue for schema changes
        if: steps.schema-check.outputs.has_schema_changes == 'true' && inputs.create_issue == true
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');

            // Read diff file if it exists
            const diffPath = require('path').join(process.env.HOME, '.monarchmoney/schema_cache/latest_diff.json');
            let diffData = null;

            if (fs.existsSync(diffPath)) {
              diffData = JSON.parse(fs.readFileSync(diffPath, 'utf8'));
            }

            const summary = diffData ? diffData.summary : {};

            // Check for breaking changes
            const hasBreakingChanges = (summary.types_removed || 0) > 0 || (summary.fields_removed || 0) > 0;

            const issueTitle = hasBreakingChanges
              ? `🚨 Breaking GraphQL Schema Changes - ${new Date().toISOString().split('T')[0]}`
              : `📋 GraphQL Schema Updates - ${new Date().toISOString().split('T')[0]}`;

            const issueBody = `# ${hasBreakingChanges ? '🚨 Breaking' : '📋'} GraphQL Schema Changes Detected

            **Detected on:** ${new Date().toISOString()}
            **Workflow:** [Schema Check](${context.payload.repository.html_url}/actions/runs/${context.runId})

            ## Change Summary
            - **Types added:** ${summary.types_added || 0}
            - **Types removed:** ${summary.types_removed || 0}
            - **Types modified:** ${summary.types_modified || 0}
            - **Fields added:** ${summary.fields_added || 0}
            - **Fields removed:** ${summary.fields_removed || 0}
            - **Fields deprecated:** ${summary.fields_deprecated || 0}

            ${hasBreakingChanges ? `
            ## ⚠️ Breaking Changes Detected
            This schema change may break existing operations. Please review and test thoroughly.
            ` : `
            ## ✅ Non-Breaking Changes
            These changes should not break existing functionality.
            `}

            ## Next Steps
            1. Review the schema changes in the workflow artifacts
            2. Test affected operations
            3. Update code if necessary
            4. Update documentation

            ---
            *This issue was automatically created by the Schema Check workflow.*
            `;

            const labels = hasBreakingChanges
              ? ['schema-change', 'breaking-change', 'urgent', 'api']
              : ['schema-change', 'non-breaking', 'enhancement'];

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: labels
            });

      - name: Summary
        run: |
          echo "## Schema Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow completed:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **Schema changes detected:** ${{ steps.schema-check.outputs.has_schema_changes }}" >> $GITHUB_STEP_SUMMARY