name: GraphQL Schema Monitoring

on:
  schedule:
    # Run daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    # Allow manual triggering
    inputs:
      force_diff:
        description: 'Force schema diff generation even if no changes'
        required: false
        default: 'false'
        type: boolean
      notification_level:
        description: 'Notification level'
        required: false
        default: 'normal'
        type: choice
        options:
        - silent
        - normal
        - verbose

env:
  PYTHON_VERSION: '3.11'

jobs:
  schema-validation:
    runs-on: ubuntu-latest
    name: Validate GraphQL Schema Compatibility

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for diff comparison

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest pytest-asyncio pytest-cov

      - name: Create schema cache directory
        run: |
          mkdir -p ~/.monarchmoney/schema_cache/history
          echo "Schema cache directory created"

      - name: Cache schema history
        uses: actions/cache@v3
        with:
          path: ~/.monarchmoney/schema_cache
          key: schema-cache-${{ github.ref }}-${{ github.run_number }}
          restore-keys: |
            schema-cache-${{ github.ref }}-
            schema-cache-main-
            schema-cache-

      - name: Run schema introspection and validation
        env:
          MM_TEST_EMAIL: ${{ secrets.MM_TEST_EMAIL }}
          MM_TEST_PASSWORD: ${{ secrets.MM_TEST_PASSWORD }}
        run: |
          echo "Running schema validation tests..."
          pytest tests/test_schema_validation.py -v \
            --tb=short \
            --durations=10 \
            --cov=monarchmoney.schema_monitor \
            --cov=monarchmoney.graphql \
            --cov-report=xml \
            --cov-report=term-missing

      - name: Generate schema diff report
        env:
          MM_TEST_EMAIL: ${{ secrets.MM_TEST_EMAIL }}
          MM_TEST_PASSWORD: ${{ secrets.MM_TEST_PASSWORD }}
        run: |
          echo "Generating schema diff report..."
          python -c "
          import asyncio
          import json
          import os
          from pathlib import Path
          from monarchmoney import MonarchMoney
          from monarchmoney.schema_monitor import SchemaMonitor

          async def generate_diff_report():
              print('Authenticating...')
              mm = MonarchMoney(debug=False)
              await mm.login_with_email(
                  os.getenv('MM_TEST_EMAIL'),
                  os.getenv('MM_TEST_PASSWORD')
              )

              print('Creating schema monitor...')
              monitor = SchemaMonitor(mm)

              print('Introspecting current schema...')
              current_schema = await monitor.introspect_schema()

              # Check for previous schema
              cache_dir = Path.home() / '.monarchmoney' / 'schema_cache'
              history_dir = cache_dir / 'history'

              if history_dir.exists():
                  history_files = list(history_dir.glob('schema_*.json'))
                  if history_files:
                      # Load most recent schema
                      latest_file = max(history_files, key=lambda p: p.stat().st_mtime)
                      print(f'Loading previous schema from {latest_file}')

                      with open(latest_file) as f:
                          history_data = json.load(f)
                          previous_schema = history_data['schema']

                      # Generate diff
                      print('Generating schema diff...')
                      diff = await monitor.diff_schemas(previous_schema, current_schema)

                      # Save diff report
                      diff_file = cache_dir / 'latest_diff.json'
                      with open(diff_file, 'w') as f:
                          json.dump(diff, f, indent=2)

                      print(f'Diff report saved to {diff_file}')
                      print(f'Summary: {diff[\"summary\"]}')

                      # Set GitHub output
                      summary = diff['summary']
                      has_changes = any(summary[key] > 0 for key in summary if key != 'timestamp')

                      with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                          f.write(f'has_schema_changes={str(has_changes).lower()}\\n')
                          f.write(f'types_added={summary[\"types_added\"]}\\n')
                          f.write(f'types_removed={summary[\"types_removed\"]}\\n')
                          f.write(f'types_modified={summary[\"types_modified\"]}\\n')
                          f.write(f'fields_added={summary[\"fields_added\"]}\\n')
                          f.write(f'fields_removed={summary[\"fields_removed\"]}\\n')
                          f.write(f'fields_deprecated={summary[\"fields_deprecated\"]}\\n')
                  else:
                      print('No previous schema found in history')
                      with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                          f.write('has_schema_changes=false\\n')
                          f.write('first_run=true\\n')

              # Save current schema to history
              print('Saving current schema to history...')
              await monitor.save_schema_history(current_schema)

              print('Schema monitoring completed')

          asyncio.run(generate_diff_report())
          "

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: schema-monitoring
          name: schema-monitoring-coverage

      - name: Upload schema artifacts
        uses: actions/upload-artifact@v3
        with:
          name: schema-monitoring-results
          path: |
            ~/.monarchmoney/schema_cache/latest_diff.json
            ~/.monarchmoney/schema_cache/latest_schema.json
          retention-days: 30

      - name: Check for breaking changes
        id: check_breaking
        run: |
          if [ -f ~/.monarchmoney/schema_cache/latest_diff.json ]; then
            echo "Analyzing schema changes for breaking changes..."
            python -c "
            import json
            from pathlib import Path

            diff_file = Path.home() / '.monarchmoney' / 'schema_cache' / 'latest_diff.json'

            if diff_file.exists():
                with open(diff_file) as f:
                    diff = json.load(f)

                summary = diff['summary']
                breaking_changes = []

                # Check for potentially breaking changes
                if summary['types_removed'] > 0:
                    breaking_changes.append(f'{summary[\"types_removed\"]} types removed')

                if summary['fields_removed'] > 0:
                    breaking_changes.append(f'{summary[\"fields_removed\"]} fields removed')

                # Check for specific breaking field removals
                changes = diff['changes']
                critical_fields_removed = []

                for type_change in changes.get('types_modified', []):
                    type_name = type_change['type']
                    field_changes = type_change['changes']

                    for removed_field in field_changes.get('fields_removed', []):
                        # Check if this is a critical field for known operations
                        if type_name in ['Holding', 'Transaction', 'Account'] and removed_field in ['id']:
                            critical_fields_removed.append(f'{type_name}.{removed_field}')

                if critical_fields_removed:
                    breaking_changes.append(f'Critical fields removed: {critical_fields_removed}')

                if breaking_changes:
                    print(f'BREAKING CHANGES DETECTED: {breaking_changes}')
                    with open('breaking_changes.txt', 'w') as f:
                        f.write('\\n'.join(breaking_changes))
                else:
                    print('No breaking changes detected')
            "
          fi

      - name: Create issue for breaking changes
        if: steps.check_breaking.outcome == 'success' && hashFiles('breaking_changes.txt') != ''
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');

            if (fs.existsSync('breaking_changes.txt')) {
              const breakingChanges = fs.readFileSync('breaking_changes.txt', 'utf8');

              const issueBody = `# ðŸš¨ Breaking GraphQL Schema Changes Detected

            **Detected on:** ${new Date().toISOString()}
            **Workflow:** [Schema Monitoring](${context.payload.repository.html_url}/actions/runs/${context.runId})

            ## Breaking Changes
            ${breakingChanges.split('\\n').map(change => `- ${change}`).join('\\n')}

            ## Recommended Actions
            1. **Review the changes** in the schema diff report
            2. **Update affected operations** to use alternative fields or approaches
            3. **Test thoroughly** with the new schema
            4. **Update documentation** if API interfaces change

            ## Schema Diff Report
            Check the workflow artifacts for detailed diff information.

            ## Validation Status
            - [ ] Schema changes reviewed
            - [ ] Code updated for compatibility
            - [ ] Tests updated
            - [ ] Documentation updated
            - [ ] Ready for release

            ---
            *This issue was automatically created by the Schema Monitoring workflow.*
            `;

              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `ðŸš¨ Breaking GraphQL Schema Changes - ${new Date().toISOString().split('T')[0]}`,
                body: issueBody,
                labels: ['schema-change', 'breaking-change', 'urgent', 'api']
              });
            }

      - name: Create issue for non-breaking changes
        if: steps.generate_diff.outputs.has_schema_changes == 'true' && !hashFiles('breaking_changes.txt')
        uses: actions/github-script@v6
        with:
          script: |
            const issueBody = `# ðŸ“‹ GraphQL Schema Changes Detected

            **Detected on:** ${new Date().toISOString()}
            **Workflow:** [Schema Monitoring](${context.payload.repository.html_url}/actions/runs/${context.runId})

            ## Change Summary
            - Types added: ${{ steps.generate_diff.outputs.types_added }}
            - Types modified: ${{ steps.generate_diff.outputs.types_modified }}
            - Fields added: ${{ steps.generate_diff.outputs.fields_added }}
            - Fields deprecated: ${{ steps.generate_diff.outputs.fields_deprecated }}

            ## Status
            âœ… No breaking changes detected

            ## Next Steps
            1. Review the schema changes for potential optimizations
            2. Consider using new fields if beneficial
            3. Plan migration away from deprecated fields

            Check the workflow artifacts for detailed diff information.

            ---
            *This issue was automatically created by the Schema Monitoring workflow.*
            `;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸ“‹ GraphQL Schema Updates - ${new Date().toISOString().split('T')[0]}`,
              body: issueBody,
              labels: ['schema-change', 'non-breaking', 'enhancement']
            });

      - name: Post status to Slack (if configured)
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ "${{ steps.generate_diff.outputs.has_schema_changes }}" == "true" ]; then
            if [ -f "breaking_changes.txt" ]; then
              STATUS="ðŸš¨ BREAKING CHANGES"
              COLOR="danger"
            else
              STATUS="ðŸ“‹ Schema Updates"
              COLOR="warning"
            fi
          else
            STATUS="âœ… No Changes"
            COLOR="good"
          fi

          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"attachments\": [{
                \"color\": \"$COLOR\",
                \"title\": \"MonarchMoney Schema Monitoring\",
                \"fields\": [
                  {\"title\": \"Status\", \"value\": \"$STATUS\", \"short\": true},
                  {\"title\": \"Repository\", \"value\": \"${{ github.repository }}\", \"short\": true},
                  {\"title\": \"Workflow\", \"value\": \"<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>\", \"short\": false}
                ]
              }]
            }" \
            $SLACK_WEBHOOK_URL || echo "Slack notification failed (webhook not configured or failed)"

      - name: Summary
        run: |
          echo "## Schema Monitoring Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow completed:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **Schema changes detected:** ${{ steps.generate_diff.outputs.has_schema_changes }}" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.generate_diff.outputs.has_schema_changes }}" == "true" ]; then
            echo "- **Types added:** ${{ steps.generate_diff.outputs.types_added }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Types removed:** ${{ steps.generate_diff.outputs.types_removed }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Types modified:** ${{ steps.generate_diff.outputs.types_modified }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Fields added:** ${{ steps.generate_diff.outputs.fields_added }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Fields removed:** ${{ steps.generate_diff.outputs.fields_removed }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Fields deprecated:** ${{ steps.generate_diff.outputs.fields_deprecated }}" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "breaking_changes.txt" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ðŸš¨ Breaking Changes Detected" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            cat breaking_changes.txt >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi